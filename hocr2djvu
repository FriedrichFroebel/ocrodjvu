#!/usr/bin/python
try:
	import lxml.etree as ET
except ImportError, ex:
	ex.args = '%s; please install the python-lxml package <http://codespeak.net/lxml/>' % str(ex),
	raise
import sys
import re
from djvu import miniexp

hocr_class_to_djvu = \
dict(
	ocr_page = 'page',
	ocr_column = 'column',
	ocr_par = 'para',
	ocr_line = 'line',
	ocrx_block = 'region',
	ocrx_line = 'line',
	ocrx_word = 'word'
).get

BBOX_RE = re.compile(
	r'''
		bbox \s+
		(?P<x0> \d+) \s+ 
		(?P<y0> \d+) \s+
		(?P<x1> \d+) \s+
		(?P<y1> \d+)
	''', re.VERBOSE)

def construct(node):
	if node.tag == ET.Comment:
		return
	def gather_children_results():
		have_subresults = False
		for child in node.iterchildren():
			for subresult in construct(child):
				yield subresult
		if not have_subresults:
			yield (node.text or '')
	hocr_classes = (node.get('class') or '').split()
	djvu_class = None
	for hocr_class in hocr_classes:
		djvu_class = hocr_class_to_djvu(hocr_class)
		if djvu_class:
			break
	if djvu_class:
		m = BBOX_RE.search(node.get('title') or '')
		if m is None:
			djvu_class = None
	if djvu_class:
		result = [miniexp.Symbol(djvu_class)]
		result += (int(m.group(id)) for id in ('x0', 'y0', 'x1', 'y1'))
		result += gather_children_results()
		yield tuple(result)
	else:
		for subresult in gather_children_results():
			yield subresult

def main():
	doc = ET.parse(sys.stdin, ET.HTMLParser())
	x = tuple(construct(doc.find('/body')))
	miniexp.Expression(x).print_into(sys.stdout, 80)

if __name__ == '__main__':
	main()

# vim:ts=4 sw=4 noet
