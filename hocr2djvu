#!/usr/bin/python
try:
	import lxml.etree as ET
except ImportError, ex:
	ex.args = '%s; please install the python-lxml package <http://codespeak.net/lxml/>' % str(ex),
	raise
import sys
import re
from djvu import miniexp

hocr_class_to_djvu = \
dict(
	ocr_page = 'page',
	ocr_column = 'column',
	ocr_par = 'para',
	ocr_line = 'line',
	ocrx_block = 'region',
	ocrx_line = 'line',
	ocrx_word = 'word'
).get

BBOX_RE = re.compile(
	r'''
		bbox \s+
		(?P<x0> \d+) \s+ 
		(?P<y0> \d+) \s+
		(?P<x1> \d+) \s+
		(?P<y1> \d+)
	''', re.VERBOSE)

def update_bbox(parent_bbox, child_bbox):
	for i in xrange(4):
		if parent_bbox[i] is None:
			parent_bbox[i] = child_bbox[i]
		elif i < 2 and child_bbox[i] is not None and parent_bbox[i] > child_bbox[i]:
			parent_bbox[i] = child_bbox[i]
		elif i > 1 and child_bbox[i] is not None and parent_bbox[i] < child_bbox[i]:
			parent_bbox[i] = child_bbox[i]

def _scan(node, buffer, parent_bbox):
	def look_down(buffer, parent_bbox):
		have_subresults = False
		for child in node.iterchildren():
			_scan(child, buffer, parent_bbox)
			if node.tail and node.tail.strip():
				buffer.append(node.tail)
		if node.text and node.text.strip():
			buffer.append(node.text)
	if not isinstance(node.tag, basestring):
		return
	hocr_classes = (node.get('class') or '').split()
	djvu_class = None
	for hocr_class in hocr_classes:
		djvu_class = hocr_class_to_djvu(hocr_class)
		if djvu_class:
			break
	if djvu_class:
		m = BBOX_RE.search(node.get('title') or '')
		if m is None:
			bbox = [None] * 4
		else:
			bbox = [int(m.group(id)) for id in ('x0', 'y0', 'x1', 'y1')]
			update_bbox(parent_bbox, bbox)
	if djvu_class:
		result = [miniexp.Symbol(djvu_class)]
		result += [None] * 4
		look_down(result, bbox)
		result[1:5] = bbox
		if len(result) == 5:
			result.append('')
		buffer.append(result)
	else:
		look_down(buffer, parent_bbox)

def scan(node):
	buffer = []
	bbox = [None] * 4
	_scan(node, buffer, bbox)
	return buffer

def main():
	doc = ET.parse(sys.stdin, ET.HTMLParser())
	sys.stdout.write('select\nremove-txt\n\n')
	for i, text in enumerate(scan(doc.find('/body'))):
		sys.stdout.write('select %d\nset-txt\n' % (i + 1))
		miniexp.Expression(text).print_into(sys.stdout, 80)
		sys.stdout.write('\n.\n\n')

if __name__ == '__main__':
	main()

# vim:ts=4 sw=4 noet
